C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE KEY_FUNC
OBJECT MODULE PLACED IN .\output\key_func.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE code\key_func.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\output\key_func.lst) OBJECT(.\output\key_func.obj)

line level    source

   1          #include "key_func.h"
   2          #include "func_def.h"
   3          #include "MC96F6432.h"
   4          #include "gp_sub.h"
   5          #include "rtc.h"
   6          #include "common.h"
   7          #include "main_sub.h"
   8          
   9          #define KEY_PORT P0
  10          
  11          #define ALL_KEY_MASK 0x38
  12          #define KEY1_MASK    0x30
  13          #define KEY2_MASK    0x28
  14          #define KEY3_MASK    0x18
  15          
  16          enum {
  17              NO_KEY,
  18              UP_KEY,
  19              DOWN_KEY,
  20              MODE_KEY,
  21              MAX_KEY,
  22          };
  23          
  24          enum {
  25              KEY0,
  26              KEY1 = DOWN_KEY,
  27              KEY2 = UP_KEY,
  28              KEY3 = MODE_KEY,
  29          };
  30          
  31          #define SET_MODE_TIME (10 * 2) // 10S
  32          #define KEY_HOLD_TIME 2
  33          
  34          static struct KeyType g_key;
  35          static enum SetItemType g_setItem;
  36          static uint8_t g_setModeCtr;
  37          static uint8_t g_holdKeyCtr;
  38          
  39          void IncHoldKeyCtr(void)
  40          {
  41   1          g_holdKeyCtr++;
  42   1      }
  43          
  44          void SetKeyFlag(uint8_t keyFlag)
  45          {
  46   1          struct KeyType *type = &g_key;
  47   1      
  48   1          type->keyFlag.flags |= keyFlag;
  49   1      }
  50          
  51          BOOLEAN GetKeyFlag(uint8_t flags)
  52          {
  53   1          BOOLEAN ret;
  54   1          struct KeyType *type = &g_key;
C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 2   

  55   1      
  56   1          if ((type->keyFlag.flags & flags) == 0) {
  57   2              ret = false;
  58   2          } else {
  59   2              ret = true;
  60   2          }
  61   1      
  62   1          return ret;
  63   1      }
  64          
  65          void ResetKeyFlag(uint8_t flags)
  66          {
  67   1          struct KeyType *type = &g_key;
  68   1      
  69   1          type->keyFlag.flags &= ~flags;
  70   1      }
  71          
  72          void SetItem(enum SetItemType item)
  73          {
  74   1          g_setItem = item;
  75   1      }
  76          
  77          enum SetItemType GetItem(void)
  78          {
  79   1          return g_setItem;
  80   1      }
  81          
  82          uint8_t GetSetModeCtr(void)
  83          {
  84   1          return g_setModeCtr;
  85   1      }
  86          
  87          void SetModeCountDec(void)
  88          {
  89   1          if (g_setModeCtr) {
  90   2              g_setModeCtr--;
  91   2              if (g_setModeCtr == 0x00) {
  92   3                  SetItem(NORMAL_MODE);
  93   3              }
  94   2          }
  95   1      }
  96          
  97          void ScanKey(void)
  98          {
  99   1          uint8_t i, j;
 100   1          struct KeyType *type = &g_key;
 101   1      
 102   1          type->key = NO_KEY;
 103   1      
 104   1          i = (KEY_PORT & ALL_KEY_MASK);
 105   1          if (i == ALL_KEY_MASK) {
 106   2              type->keyFlag.flag.pushKey = 0;
 107   2              type->keyFlag.flag.newKey  = 0;
 108   2              type->keyFlag.flag.holdKey = 0;
 109   2              type->keyFlag.flag.twoKey  = 0;
 110   2              goto normal_quit_scan_key;
 111   2          }
 112   1      
 113   1          DelayMs(2);
 114   1      
 115   1          j = (KEY_PORT & ALL_KEY_MASK);
 116   1          if ((j == ALL_KEY_MASK) || (i != j)) {
C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 3   

 117   2              type->keyFlag.flag.newKey  = 0;
 118   2              type->keyFlag.flag.holdKey = 0;
 119   2              type->keyFlag.flag.twoKey  = 0;
 120   2              goto normal_quit_scan_key;
 121   2          }
 122   1      
 123   1          DISABLE_KEY_INT();
 124   1          i = (KEY_PORT & ALL_KEY_MASK);
 125   1          switch (i) {
 126   2              case KEY1_MASK:
 127   2                  type->key = KEY1;
 128   2                  break;
 129   2              case KEY2_MASK:
 130   2                  type->key = KEY2;
 131   2                  break;
 132   2              case KEY3_MASK:
 133   2                  type->key = KEY3;
 134   2                  break;
 135   2              default:
 136   2                  break;
 137   2          }
 138   1      
 139   1          if (type->key == NO_KEY) {
 140   2              type->key                  = NO_KEY;
 141   2              type->keyFlag.flag.newKey  = 0;
 142   2              type->keyFlag.flag.holdKey = 0;
 143   2              type->keyFlag.flag.twoKey  = 0;
 144   2              goto normal_quit_scan_key;
 145   2          } else {
 146   2              if (type->keyFlag.flag.pushKey == 0) {
 147   3                  type->oldKey               = type->key;
 148   3                  type->keyFlag.flag.newKey  = 1;
 149   3                  type->keyFlag.flag.pushKey = 1;
 150   3              }
 151   2          }
 152   1      
 153   1      normal_quit_scan_key:
 154   1          CLR_KEY_INT_FLAG();
 155   1          ENABLE_KEY_INT();
 156   1      }
 157          
 158          BOOLEAN HoldKeyCom(void)
 159          {
 160   1          struct KeyType *type = &g_key;
 161   1      
 162   1          if (type->keyFlag.flag.newKey == 1) {
 163   2              g_holdKeyCtr = 0;
 164   2          } else {
 165   2              if (type->keyFlag.flag.holdKey == 0) {
 166   3                  if (g_holdKeyCtr == KEY_HOLD_TIME) {
 167   4                      type->keyFlag.flag.holdKey = 1;
 168   4                      return 1;
 169   4                  }
 170   3              }
 171   2          }
 172   1      
 173   1          return 0;
 174   1      }
 175          
 176          BOOLEAN SettingCom(void)
 177          {
 178   1          struct KeyType *type = &g_key;
C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 4   

 179   1      
 180   1          if (type->keyFlag.flag.newKey == 1) {
 181   2              g_holdKeyCtr = 0;
 182   2              return 1;
 183   2          } else {
 184   2              if (type->keyFlag.flag.holdKey == 0) {
 185   3                  if (g_holdKeyCtr == KEY_HOLD_TIME) {
 186   4                      type->keyFlag.flag.holdKey = 1;
 187   4                      return 1;
 188   4                  }
 189   3              } else {
 190   3                  return 1;
 191   3              }
 192   2          }
 193   1      
 194   1          return 0;
 195   1      }
 196          
 197          void PushKeyFunc(void)
 198          {
 199   1          struct KeyType *type = &g_key;
 200   1      
 201   1          if ((type->key >= MAX_KEY) && (type->key == NO_KEY)) {
 202   2              return;
 203   2          }
 204   1      
 205   1          if (type->keyFlag.flag.newKey || type->keyFlag.flag.holdKey) {
 206   2              if (g_setItem != NORMAL_MODE) {
 207   3                  g_setModeCtr = SET_MODE_TIME;
 208   3              }
 209   2          }
 210   1      
 211   1          switch (type->key) {
 212   2              case UP_KEY:
 213   2                  if (g_setItem != NORMAL_MODE) {
 214   3                      if (SettingCom() == 1) {
 215   4                          if (type->keyFlag.flag.newKey == 1) {
 216   5                              switch (g_setItem) {
 217   6                                  case CLOCK_SET_HR:
 218   6                                      ToggleTimeFlag(SET_HR_FLAG);
 219   6                                      break;
 220   6                                  default:
 221   6                                      break;
 222   6                              }
 223   5                          }
 224   4      
 225   4                          switch (g_setItem) {
 226   5                              case CLOCK_SET_HOUR:
 227   5                                  IncHour();
 228   5                                  break;
 229   5                              case CLOCK_SET_MIN:
 230   5                                  IncMin();
 231   5                                  break;
 232   5                              case CLOCK_SET_YEAR:
 233   5                                  IncYear();
 234   5                                  break;
 235   5                              case CLOCK_SET_MONTH:
 236   5                                  IncMonth();
 237   5                                  break;
 238   5                              case CLOCK_SET_DAY:
 239   5                                  IncDay();
 240   5                                  break;
C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 5   

 241   5                              default:
 242   5                                  break;
 243   5                          }
 244   4                          SetTimeFlag(SET_COL_FLAG);
 245   4                          CalculateWeek();
 246   4                      }
 247   3                  }
 248   2                  break;
 249   2              case DOWN_KEY:
 250   2                  if (g_setItem != NORMAL_MODE) {
 251   3                      if (SettingCom() == 1) {
 252   4                          if (type->keyFlag.flag.newKey == 1) {
 253   5                              switch (g_setItem) {
 254   6                                  case CLOCK_SET_HR:
 255   6                                      ToggleTimeFlag(SET_HR_FLAG);
 256   6                                      break;
 257   6                                  default:
 258   6                                      break;
 259   6                              }
 260   5                          }
 261   4      
 262   4                          switch (g_setItem) {
 263   5                              case CLOCK_SET_HOUR:
 264   5                                  DecHour();
 265   5                                  break;
 266   5                              case CLOCK_SET_MIN:
 267   5                                  DecMin();
 268   5                                  break;
 269   5                              case CLOCK_SET_YEAR:
 270   5                                  DecYear();
 271   5                                  break;
 272   5                              case CLOCK_SET_MONTH:
 273   5                                  DecMonth();
 274   5                                  break;
 275   5                              case CLOCK_SET_DAY:
 276   5                                  DecDay();
 277   5                                  break;
 278   5                              default:
 279   5                                  break;
 280   5                          }
 281   4                          SetTimeFlag(SET_COL_FLAG);
 282   4                          CalculateWeek();
 283   4                      }
 284   3                  }
 285   2                  break;
 286   2              case MODE_KEY:
 287   2                  if (HoldKeyCom()) {
 288   3                  }
 289   2                  break;
 290   2              default:
 291   2                  break;
 292   2          }
 293   1      
 294   1          type->keyFlag.flag.newKey = 0;
 295   1          SetDisplayTime(DISPLAY_10MIN_TIME);
 296   1      }
 297          
 298          void ReleKeyFunc(void)
 299          {
 300   1          struct KeyType *type = &g_key;
 301   1          uint8_t key          = type->oldKey;
 302   1      
C51 COMPILER V9.59.0.0   KEY_FUNC                                                          05/31/2022 20:33:57 PAGE 6   

 303   1          type->oldKey = 0x00;
 304   1          if ((key >= MAX_KEY) && (key == NO_KEY)) {
 305   2              return;
 306   2          }
 307   1      
 308   1          switch (key) {
 309   2              case UP_KEY:
 310   2                  break;
 311   2              case DOWN_KEY:
 312   2                  break;
 313   2              case MODE_KEY:
 314   2                  //set clock.
 315   2                  if (g_setItem != NORMAL_MODE) {
 316   3                      if ((g_setItem & CLOCK_SET) != CLOCK_SET) {
 317   4                          g_setItem = NORMAL_MODE;
 318   4                      } else {
 319   4                          g_setModeCtr = SET_MODE_TIME;
 320   4                          g_setItem++;
 321   4                          if (g_setItem > CLOCK_SET_DAY) {
 322   5                              g_setItem    = NORMAL_MODE;
 323   5                              g_setModeCtr = 0x00;
 324   5                          }
 325   4                      }
 326   3                  } else {
 327   3                      g_setItem    = CLOCK_SET_HOUR;
 328   3                      g_setModeCtr = SET_MODE_TIME;
 329   3                      Timer1_init();
 330   3                  }
 331   2                  break;
 332   2              default:
 333   2                  break;
 334   2          }
 335   1      
 336   1          SetDisplayTime(DISPLAY_10MIN_TIME);
 337   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    804    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
