C51 COMPILER V9.59.0.0   SI7021                                                            05/31/2022 20:33:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SI7021
OBJECT MODULE PLACED IN .\output\si7021.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE code\si7021.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\output\si7021.lst) OBJECT(.\output\si7021.obj)

line level    source

   1          #include <intrins.h>
   2          #include "MC96F6432.h"
   3          #include "si7021.h"
   4          #include "func_def.h"
   5          #include "gp_sub.h"
   6          #include "key_func.h"
   7          
   8          #define I2C_DELAY_TIME 250
   9          
  10          #define HSB 0
  11          #define LSB 1
  12          
  13          #define BIT_HIGH 1
  14          #define BIT_LOW  0
  15          
  16          #define WRITE_CMD  0x80
  17          #define READ_CDM   0x81
  18          #define SALVE_ADDR 0x80
  19          
  20          #define HUMI_HOLD_MASTER 0xE5
  21          #define TEMP_HOLD_MASTER 0xE3
  22          
  23          #define HUMI_NOHOLD_MASTER 0xF5
  24          #define TEMP_NOHOLD_MASTER 0xF3
  25          
  26          #define SI7021_SCL        P11
  27          #define SI7021_SDA        P10
  28          #define SI7021_SDA_PORT   P1
  29          #define SI7021_SDA_NUMBER (1 << 0)
  30          
  31          #define SI7021_SDAIN()              \
  32              do {                            \
  33                  P1IO &= ~SI7021_SDA_NUMBER; \
  34              } while (0)
  35          #define SI7021_SDAOUT()            \
  36              do {                           \
  37                  P1IO |= SI7021_SDA_NUMBER; \
  38              } while (0)
  39          
  40          #define SI7021_SCL_HIGH()      \
  41              do {                       \
  42                  SI7021_SCL = BIT_HIGH; \
  43              } while (0)
  44          #define SI7021_SCL_LOW()      \
  45              do {                      \
  46                  SI7021_SCL = BIT_LOW; \
  47              } while (0)
  48          
  49          #define SI7021_SDA_HIGH()      \
  50              do {                       \
  51                  SI7021_SDA = BIT_HIGH; \
  52              } while (0)
  53          #define SI7021_SDA_LOW()      \
  54              do {                      \
C51 COMPILER V9.59.0.0   SI7021                                                            05/31/2022 20:33:57 PAGE 2   

  55                  SI7021_SDA = BIT_LOW; \
  56              } while (0)
  57          
  58          union union16 {
  59              unsigned int uint;
  60              unsigned char uchar[2];
  61          };
  62          
  63          union union32 {
  64              long _long;
  65              unsigned int uint[2];
  66              unsigned char uchar[4];
  67          };
  68          
  69          struct Si7021Type {
  70              int16_t temp;
  71              uint16_t humi;
  72              uint8_t crc;
  73          };
  74          static struct Si7021Type g_si7021;
  75          
  76          static void I2C_DelayUs(uint8_t delay)
  77          {
  78   1          while (delay-- != 0) {
  79   2              _nop_();
  80   2          }
  81   1      }
  82          
  83          static void I2C_Start(void)
  84          {
  85   1          SI7021_SDA_HIGH();
  86   1          I2C_DelayUs(I2C_DELAY_TIME);
  87   1          SI7021_SCL_HIGH();
  88   1          I2C_DelayUs(I2C_DELAY_TIME);
  89   1          SI7021_SDA_LOW();
  90   1          I2C_DelayUs(I2C_DELAY_TIME);
  91   1          SI7021_SCL_LOW();
  92   1          I2C_DelayUs(I2C_DELAY_TIME);
  93   1      }
  94          
  95          static void I2C_Stop(void)
  96          {
  97   1          SI7021_SDA_LOW();
  98   1          I2C_DelayUs(I2C_DELAY_TIME);
  99   1          SI7021_SCL_HIGH();
 100   1          I2C_DelayUs(I2C_DELAY_TIME);
 101   1          SI7021_SDA_HIGH();
 102   1          I2C_DelayUs(I2C_DELAY_TIME);
 103   1      }
 104          
 105          static BOOLEAN I2C_SendByte(uint8_t send_data)
 106          {
 107   1          uint8_t i;
 108   1          BOOLEAN ret = 0;
 109   1          uint8_t delay;
 110   1          uint8_t read;
 111   1      
 112   1          for (i = 0; i < 8; i++) {
 113   2              SI7021_SCL_LOW();
 114   2              if ((send_data << i) & 0x80) {
 115   3                  SI7021_SDA_HIGH();
 116   3              } else {
C51 COMPILER V9.59.0.0   SI7021                                                            05/31/2022 20:33:57 PAGE 3   

 117   3                  SI7021_SDA_LOW();
 118   3              }
 119   2              I2C_DelayUs(I2C_DELAY_TIME);
 120   2              SI7021_SCL_HIGH();
 121   2              I2C_DelayUs(I2C_DELAY_TIME);
 122   2          }
 123   1      
 124   1          I2C_DelayUs(I2C_DELAY_TIME);
 125   1          SI7021_SCL_LOW();
 126   1          SI7021_SDA_HIGH();
 127   1          I2C_DelayUs(I2C_DELAY_TIME);
 128   1      
 129   1          I2C_DelayUs(I2C_DELAY_TIME);
 130   1          SI7021_SCL_HIGH();
 131   1          I2C_DelayUs(I2C_DELAY_TIME);
 132   1      
 133   1          SI7021_SDAIN();
 134   1          delay = 200;
 135   1          while (delay--) {
 136   2              I2C_DelayUs(I2C_DELAY_TIME);
 137   2              read = SI7021_SDA_PORT;
 138   2              if ((read & SI7021_SDA_NUMBER) == 0x00) {
 139   3                  ret = 1;
 140   3                  break;
 141   3              }
 142   2          }
 143   1          SI7021_SDAOUT();
 144   1      
 145   1          if (delay == 0) {
 146   2              ret = 0;
 147   2          }
 148   1      
 149   1          SI7021_SCL_LOW();
 150   1          I2C_DelayUs(I2C_DELAY_TIME);
 151   1      
 152   1          return ret;
 153   1      }
 154          
 155          static uint8_t I2C_ReadByte(void)
 156          {
 157   1          uint8_t value = 0;
 158   1          uint8_t i;
 159   1          uint8_t read;
 160   1      
 161   1          SI7021_SDAIN();
 162   1          for (i = 0; i < 8; i++) {
 163   2              SI7021_SCL_HIGH();
 164   2              I2C_DelayUs(I2C_DELAY_TIME);
 165   2              value <<= 1;
 166   2              read = SI7021_SDA_PORT;
 167   2              if (read & SI7021_SDA_NUMBER) {
 168   3                  value += 1;
 169   3              }
 170   2              SI7021_SCL_LOW();
 171   2          }
 172   1          SI7021_SDAOUT();
 173   1      
 174   1          return value;
 175   1      }
 176          
 177          static void I2C_Ack(void)
 178          {
C51 COMPILER V9.59.0.0   SI7021                                                            05/31/2022 20:33:57 PAGE 4   

 179   1          SI7021_SDA_LOW();
 180   1          I2C_DelayUs(I2C_DELAY_TIME);
 181   1          SI7021_SCL_LOW();
 182   1          I2C_DelayUs(I2C_DELAY_TIME);
 183   1          SI7021_SCL_HIGH();
 184   1          I2C_DelayUs(I2C_DELAY_TIME);
 185   1          SI7021_SCL_LOW();
 186   1          I2C_DelayUs(I2C_DELAY_TIME);
 187   1          SI7021_SDA_HIGH();
 188   1          I2C_DelayUs(I2C_DELAY_TIME);
 189   1      }
 190          
 191          static void I2C_Nack(void)
 192          {
 193   1          SI7021_SDA_HIGH();
 194   1          I2C_DelayUs(I2C_DELAY_TIME);
 195   1          SI7021_SCL_HIGH();
 196   1          I2C_DelayUs(I2C_DELAY_TIME);
 197   1          SI7021_SCL_LOW();
 198   1      }
 199          
 200          static void SI7021_Measure(uint8_t model, union union16 *value)
 201          {
 202   1          uint16_t tmp;
 203   1          FP32 buff;
 204   1          uint8_t crc8;
 205   1      
 206   1          I2C_Start();
 207   1          if (0 == I2C_SendByte(SALVE_ADDR)) { // slave addr
 208   2              value->uint = 0xAABB;
 209   2              return;
 210   2          }
 211   1          if (0 == I2C_SendByte(model)) { // measure cmd
 212   2              value->uint = 0x1234;
 213   2              return;
 214   2          }
 215   1      
 216   1          DelayMs(100);
 217   1      
 218   1          I2C_Start();
 219   1          if (0 == I2C_SendByte(SALVE_ADDR + 1)) {
 220   2              value->uint = 0x3456;
 221   2              return;
 222   2          }
 223   1      
 224   1          value->uchar[HSB] = I2C_ReadByte();
 225   1          I2C_Ack();
 226   1          value->uchar[LSB] = I2C_ReadByte();
 227   1          I2C_Ack();
 228   1          crc8 = I2C_ReadByte();
 229   1          I2C_Nack();
 230   1          I2C_Stop();
 231   1      
 232   1          tmp = (value->uchar[HSB] << 8) | value->uchar[LSB];
 233   1          if (model != TEMP_HOLD_MASTER) {
 234   2              buff = tmp * 125.0;
 235   2              buff = buff / 65536 - 6;
 236   2              g_si7021.humi = buff * 100;
 237   2          } else {
 238   2              buff = tmp * 175.72;
 239   2              buff = buff / 65536 - 46.85;
 240   2              g_si7021.temp = buff * 100;
C51 COMPILER V9.59.0.0   SI7021                                                            05/31/2022 20:33:57 PAGE 5   

 241   2          }
 242   1      }
 243          
 244          void SI7021_SampleTempHumi(void)
 245          {
 246   1          static uint8_t count = 0;
 247   1      
 248   1          count++;
 249   1          if (count > 10) {
 250   2              count = 0x00;
 251   2              if (GetSetModeCtr() == 0) {
 252   3                  SI7021_Measure(TEMP_HOLD_MASTER, (union union16 *)(&g_si7021.temp));
 253   3                  DelayMs(1);
 254   3                  SI7021_Measure(HUMI_HOLD_MASTER, (union union16 *)(&g_si7021.humi));
 255   3              }
 256   2          }
 257   1      }
 258          
 259          int16_t GetTemp(void)
 260          {
 261   1          return g_si7021.temp;
 262   1      }
 263          
 264          uint16_t GetHumi(void)
 265          {
 266   1          return g_si7021.humi;
 267   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    600    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
